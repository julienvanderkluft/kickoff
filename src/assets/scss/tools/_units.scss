//
// Removes the unit (e.g. px, em, rem) from a value, returning the number only.
//
// @param   {Number} $num Number to strip unit from.
// @returns {Number}      The same number, without unit.
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

//
// Converts one or more pixel values into matching rem values.
//
// @param {Number|List} $values - One or more values to convert. Be sure to separate them with spaces and not commas. If you need to convert a comma-separated list, wrap the list in parentheses.
// @param {Number} $base [null] - The base value to use when calculating the `rem`. If you're using Foundation out of the box, this is 16px. If this parameter is `null`, the function will reference the `$base-font-size` variable as the base.
//
// @returns {List} A list of converted values.
@function rem($values, $base: null) {
  $rem-values: ();
  $count: length($values);

  // If no base is defined, defer to the global font size
  @if $base == null {
    $base: $fs-root;
  }

  @if $count == 1 {
    @return rem-calc($values, $base);
  }

  @for $i from 1 through $count {
    $rem-values: append($rem-values, rem-calc(nth($values, $i), $base));
  }

  @return $rem-values;
}

//
// Converts a pixel value to matching rem value. *Any* value passed,
// regardless of unit, is assumed to be a pixel value. By default,
// the base pixel value used to calculate the rem value is taken from
// the `$fs-root` variable.
//
// @param {Number} $value - Pixel value to convert.
// @param {Number} $base [null] - Base for pixel conversion.
// @returns {Number} A number in rems, calculated based on the given value and
// the base pixel value. rem values are passed through as is.
@function rem-calc($value, $base: null) {
  // Check if the value is a number
  @if type-of($value) != 'number' {
    @warn inspect($value) + ' was passed to rem(), which is not a number.';
    @return $value;
  }

  // Calculate rem if units for $value is not rem
  @if unit($value) != 'rem' {
    $value: strip-unit($value) / strip-unit($base) * 1rem;
  }

  // Turn 0rem into 0
  @if $value == 0rem {
    $value: 0;
  }

  @return $value;
}
